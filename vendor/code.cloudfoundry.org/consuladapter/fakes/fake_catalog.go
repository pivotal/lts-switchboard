// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"code.cloudfoundry.org/consuladapter"
	"github.com/hashicorp/consul/api"
)

type FakeCatalog struct {
	NodesStub        func(q *api.QueryOptions) ([]*api.Node, *api.QueryMeta, error)
	nodesMutex       sync.RWMutex
	nodesArgsForCall []struct {
		q *api.QueryOptions
	}
	nodesReturns struct {
		result1 []*api.Node
		result2 *api.QueryMeta
		result3 error
	}
}

func (fake *FakeCatalog) Nodes(q *api.QueryOptions) ([]*api.Node, *api.QueryMeta, error) {
	fake.nodesMutex.Lock()
	fake.nodesArgsForCall = append(fake.nodesArgsForCall, struct {
		q *api.QueryOptions
	}{q})
	fake.nodesMutex.Unlock()
	if fake.NodesStub != nil {
		return fake.NodesStub(q)
	} else {
		return fake.nodesReturns.result1, fake.nodesReturns.result2, fake.nodesReturns.result3
	}
}

func (fake *FakeCatalog) NodesCallCount() int {
	fake.nodesMutex.RLock()
	defer fake.nodesMutex.RUnlock()
	return len(fake.nodesArgsForCall)
}

func (fake *FakeCatalog) NodesArgsForCall(i int) *api.QueryOptions {
	fake.nodesMutex.RLock()
	defer fake.nodesMutex.RUnlock()
	return fake.nodesArgsForCall[i].q
}

func (fake *FakeCatalog) NodesReturns(result1 []*api.Node, result2 *api.QueryMeta, result3 error) {
	fake.NodesStub = nil
	fake.nodesReturns = struct {
		result1 []*api.Node
		result2 *api.QueryMeta
		result3 error
	}{result1, result2, result3}
}

var _ consuladapter.Catalog = new(FakeCatalog)
