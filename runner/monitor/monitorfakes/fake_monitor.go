// Code generated by counterfeiter. DO NOT EDIT.
package monitorfakes

import (
	sync "sync"

	monitor "github.com/pivotal/lts-switchboard/runner/monitor"
)

type FakeMonitor struct {
	MonitorStub        func(<-chan interface{})
	monitorMutex       sync.RWMutex
	monitorArgsForCall []struct {
		arg1 <-chan interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMonitor) Monitor(arg1 <-chan interface{}) {
	fake.monitorMutex.Lock()
	fake.monitorArgsForCall = append(fake.monitorArgsForCall, struct {
		arg1 <-chan interface{}
	}{arg1})
	fake.recordInvocation("Monitor", []interface{}{arg1})
	fake.monitorMutex.Unlock()
	if fake.MonitorStub != nil {
		fake.MonitorStub(arg1)
	}
}

func (fake *FakeMonitor) MonitorCallCount() int {
	fake.monitorMutex.RLock()
	defer fake.monitorMutex.RUnlock()
	return len(fake.monitorArgsForCall)
}

func (fake *FakeMonitor) MonitorCalls(stub func(<-chan interface{})) {
	fake.monitorMutex.Lock()
	defer fake.monitorMutex.Unlock()
	fake.MonitorStub = stub
}

func (fake *FakeMonitor) MonitorArgsForCall(i int) <-chan interface{} {
	fake.monitorMutex.RLock()
	defer fake.monitorMutex.RUnlock()
	argsForCall := fake.monitorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMonitor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.monitorMutex.RLock()
	defer fake.monitorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMonitor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ monitor.Monitor = new(FakeMonitor)
